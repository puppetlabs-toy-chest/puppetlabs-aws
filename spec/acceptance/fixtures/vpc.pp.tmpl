ec2_vpc { '{{name}}-vpc':
  ensure           => {{ensure}},
  region           => '{{region}}',
  cidr_block       => '{{vpc_cidr}}',
  dhcp_options     => '{{name}}-options',
  instance_tenancy => '{{vpc_instance_tenancy}}',
  tags             => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  },
}

ec2_securitygroup { '{{name}}-vpc::default':
  ensure      => {{ensure}},
  region      => '{{region}}',
  description => 'default VPC security group',
  ingress     => [
    {{#security_group_ingress}}
      {
        {{#values}}
          {{k}} => '{{v}}',
        {{/values}}
      },
    {{/security_group_ingress}}
  ],
  tags        => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  },
  require     => Ec2_vpc['{{name}}-vpc'],
}

ec2_securitygroup { '{{name}}-sg':
  ensure      => {{ensure}},
  description => 'VPC accceptance test',
  region      => '{{region}}',
  vpc         => '{{name}}-vpc',
  ingress     => [
    {{#security_group_ingress}}
      {
        {{#values}}
          {{k}} => '{{v}}',
        {{/values}}
      },
    {{/security_group_ingress}}
  ],
  tags        => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  }
}

ec2_vpc_dhcp_options { '{{name}}-options':
  ensure            => {{ensure}},
  region            => '{{region}}',
  netbios_node_type => {{netbios_node_type}},
  tags              => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  },
}

ec2_vpc_routetable { '{{name}}-routes':
  ensure => {{ensure}},
  region => '{{region}}',
  vpc    => '{{name}}-vpc',
  routes => [
    { destination_cidr_block => '{{vpc_cidr}}', gateway => 'local' },
  ],
  tags   => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  },
}

ec2_vpc_subnet { '{{name}}-subnet':
  ensure                  => {{ensure}},
  region                  => '{{region}}',
  vpc                     => '{{name}}-vpc',
  cidr_block              => '{{subnet_cidr}}',
  availability_zone       => '{{subnet_availability_zone}}',
  map_public_ip_on_launch => {{map_public_ip_on_launch}},
  route_table             => '{{name}}-routes',
  tags                    => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  },
}

ec2_vpc_internet_gateway { '{{name}}-igw':
  ensure => {{ensure}},
  region => '{{region}}',
  vpc    => '{{name}}-vpc',
  tags   => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  },
}

ec2_vpc_customer_gateway { '{{name}}-cgw':
  ensure     => {{ensure}},
  region     => '{{region}}',
  ip_address => '{{customer_ip_address}}',
  bgp_asn    => {{bgp_asn}},
  type       => '{{vpn_type}}',
  tags       => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  },
}

ec2_vpc_vpn { '{{name}}-vpn':
  ensure           => {{ensure}},
  region           => '{{region}}',
  vpn_gateway      => '{{name}}-vgw',
  customer_gateway => '{{name}}-cgw',
  type             => '{{vpn_type}}',
  routes           => ['{{vpn_route}}'],
  static_routes    => {{static_routes}},
  tags             => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  },
}

ec2_vpc_vpn_gateway { '{{name}}-vgw':
  ensure => {{ensure}},
  region => '{{region}}',
  vpc    => '{{name}}-vpc',
  type   => '{{vpn_type}}',
  tags   => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  },
}

ec2_instance { '{{name}}-instance':
  ensure        => {{ensure}},
  region        => '{{region}}',
  image_id      => 'ami-67a60d7a',
  subnet        => '{{name}}-subnet',
  instance_type => 't1.micro',
  tags          => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  },
}

elb_loadbalancer { '{{lb_name}}':
  ensure    => {{ensure}},
  region    => '{{region}}',
  subnets   => '{{name}}-subnet',
  scheme    => '{{lb_scheme}}',
  instances => '{{name}}-instance',
  listeners => [{
    protocol           => 'tcp',
    load_balancer_port => 80,
    instance_protocol  => 'tcp',
    instance_port      => 80,
  }],
  tags      => {
  {{#tags}}
    {{k}} => '{{v}}',
  {{/tags}}
  },
}
